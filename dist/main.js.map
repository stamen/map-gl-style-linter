{"mappings":"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","sources":["src/lib/lint.js","src/lib/formatted-style-spec-validate.js","src/lib/lint-layer.js","src/index.js"],"sourcesContent":["import { formattedStyleSpecValidate } from './formatted-style-spec-validate';\nimport { validateLayers } from './lint-layer.js';\n\nexport default style => {\n  return [...formattedStyleSpecValidate(style), ...validateLayers(style)];\n};\n","import { validate } from '@mapbox/mapbox-gl-style-spec';\n\nconst formattedStyleSpecValidate = style => {\n  const { layers } = style;\n  const validationErrors = validate(style);\n  const formattedErrors = validationErrors.map(e => {\n    const { message } = e;\n    const matches = message.match(/layers\\[\\d+\\]/g);\n    if (!matches) return e;\n    let nextMessage = message;\n    matches.forEach(match => {\n      const layerIndex = JSON.parse(match.replace('layers', ''));\n      const layer = layers[layerIndex];\n      nextMessage = nextMessage.split(match).join(layer.id);\n    });\n    return { ...e, message: nextMessage };\n  });\n\n  return formattedErrors;\n};\n\nexport { formattedStyleSpecValidate };\n","import { latest, ValidationError } from '@mapbox/mapbox-gl-style-spec';\n\n/**\n * getPropertyIds\n * Get property ids for either `paint` or `layout` properties\n * @param {string} type - `paint` or `layout`\n * @returns {string[]} - property ids for the given type\n */\nconst getPropertyIds = type => {\n  let propertyIds = latest[type]\n    .map(layerType => Object.keys(latest[layerType]))\n    .flat(1);\n  return Array.from(new Set(propertyIds));\n};\n\nconst paintProperties = getPropertyIds('paint');\nconst layoutProperties = getPropertyIds('layout');\n\n/**\n * validateMisplacedProperties\n * Find property ids at the top level of a layer that should not be there\n * @param {Object} layer - a layer object from a style\n * @param {string[]} ids - property ids to look for\n * @param {string} type - `paint` or `layout`\n * @returns {ValidationError[]} - an error for each id found, if any\n */\nconst validateMisplacedProperties = (layer, ids, type) => {\n  return Object.keys(layer)\n    .filter(key => ids.includes(key))\n    .map(\n      key =>\n        new ValidationError(\n          layer.id,\n          layer[key],\n          `contains '${key}' at the top level, but it should be in ${type}`\n        )\n    );\n};\n\nconst validateMisplacedPaintProperties = layer => {\n  return validateMisplacedProperties(layer, paintProperties, 'paint');\n};\n\nconst validateMisplacedLayoutProperties = layer => {\n  return validateMisplacedProperties(layer, layoutProperties, 'layout');\n};\n\nexport const validateLayer = layer => {\n  return [\n    ...validateMisplacedLayoutProperties(layer),\n    ...validateMisplacedPaintProperties(layer)\n  ];\n};\n\nexport const validateLayers = style => {\n  if (!style.layers) return [];\n  return style.layers.map(validateLayer).flat(Infinity);\n};\n","import lint from \"./lib/lint\";\n\nexport { lint };\n"],"names":["_formattedStyleSpecValidate","require","_lintLayer","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_default","style","concat","formattedStyleSpecValidate","validateLayers","exports","_mapboxGlStyleSpec","_typeof","obj","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","layers","validationErrors","validate","formattedErrors","map","e","message","matches","match","nextMessage","layerIndex","JSON","parse","replace","layer","split","join","id","getPropertyIds","type","propertyIds","latest","layerType","flat","Set","paintProperties","layoutProperties","validateMisplacedProperties","ids","includes","ValidationError","validateMisplacedPaintProperties","validateMisplacedLayoutProperties","validateLayer","Infinity","_lint","_interopRequireDefault","__esModule"],"version":3,"file":"main.js.map"}