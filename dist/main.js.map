{"mappings":"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","sources":["src/lib/lint.js","src/lib/formatted-style-spec-validate.js","src/lib/lint-layer.js","src/index.js"],"sourcesContent":["import { formattedStyleSpecValidate } from './formatted-style-spec-validate';\nimport { validateLayers } from './lint-layer.js';\n\nexport default (style, options = { renderer: 'mapbox-gl' }) => {\n  return [\n    ...formattedStyleSpecValidate(style, options),\n    ...validateLayers(style, options)\n  ];\n};\n","import { validate as validateMapbox } from '@mapbox/mapbox-gl-style-spec';\nimport { validateStyleMin as validateMaplibre } from '@maplibre/maplibre-gl-style-spec';\n\nconst formattedStyleSpecValidate = (style, options) => {\n  const { renderer } = options;\n  const { layers } = style;\n\n  const validationErrors =\n    renderer === 'maplibre-gl'\n      ? validateMaplibre(style)\n      : validateMapbox(style);\n\n  const formattedErrors = validationErrors.map(e => {\n    const { message } = e;\n    const matches = message.match(/layers\\[\\d+\\]/g);\n    if (!matches) return e;\n    let nextMessage = message;\n    matches.forEach(match => {\n      const layerIndex = JSON.parse(match.replace('layers', ''));\n      const layer = layers[layerIndex];\n      nextMessage = nextMessage.split(match).join(layer.id);\n    });\n    return { ...e, message: nextMessage };\n  });\n\n  return formattedErrors;\n};\n\nexport { formattedStyleSpecValidate };\n","import {\n  latest as mapboxLatest,\n  ValidationError as MapboxValidationError\n} from '@mapbox/mapbox-gl-style-spec';\nimport {\n  latest as maplibreLatest,\n  ValidationError as MaplibreValidationError\n} from '@maplibre/maplibre-gl-style-spec';\n\n/**\n * getPropertyIds\n * Get property ids for either `paint` or `layout` properties\n * @param {string} type - `paint` or `layout`\n * @returns {string[]} - property ids for the given type\n */\nconst getPropertyIds = (type, options) => {\n  const { renderer } = options;\n  const latest = renderer === 'maplibre-gl' ? maplibreLatest : mapboxLatest;\n\n  let propertyIds = latest[type]\n    .map(layerType => Object.keys(latest[layerType]))\n    .flat(1);\n  return Array.from(new Set(propertyIds));\n};\n\n/**\n * validateMisplacedProperties\n * Find property ids at the top level of a layer that should not be there\n * @param {Object} layer - a layer object from a style\n * @param {string[]} ids - property ids to look for\n * @param {string} type - `paint` or `layout`\n * @returns {ValidationError[]} - an error for each id found, if any\n */\nconst validateMisplacedProperties = (layer, ids, type, options) => {\n  const { renderer } = options;\n\n  const ValidationError =\n    renderer === 'maplibre-gl'\n      ? MaplibreValidationError\n      : MapboxValidationError;\n\n  return Object.keys(layer)\n    .filter(key => ids.includes(key))\n    .map(\n      key =>\n        new ValidationError(\n          layer.id,\n          layer[key],\n          `contains '${key}' at the top level, but it should be in ${type}`\n        )\n    );\n};\n\nconst validateMisplacedPaintProperties = (layer, options) => {\n  const paintProperties = getPropertyIds('paint', options);\n  return validateMisplacedProperties(layer, paintProperties, 'paint', options);\n};\n\nconst validateMisplacedLayoutProperties = (layer, options) => {\n  const layoutProperties = getPropertyIds('layout', options);\n  return validateMisplacedProperties(\n    layer,\n    layoutProperties,\n    'layout',\n    options\n  );\n};\n\nexport const validateLayer = (layer, options) => {\n  return [\n    ...validateMisplacedLayoutProperties(layer, options),\n    ...validateMisplacedPaintProperties(layer, options)\n  ];\n};\n\nexport const validateLayers = (style, options) => {\n  if (!style.layers) return [];\n  return style.layers.map(l => validateLayer(l, options)).flat(Infinity);\n};\n","import lint from \"./lib/lint\";\n\nexport { lint };\n"],"names":["_formattedStyleSpecValidate","require","_lintLayer","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_default","style","options","arguments","undefined","renderer","concat","formattedStyleSpecValidate","validateLayers","exports","_mapboxGlStyleSpec","_maplibreGlStyleSpec","_typeof","obj","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","layers","validationErrors","validateMaplibre","validateMapbox","formattedErrors","map","e","message","matches","match","nextMessage","layerIndex","JSON","parse","replace","layer","split","join","id","getPropertyIds","type","latest","maplibreLatest","mapboxLatest","propertyIds","layerType","flat","Set","validateMisplacedProperties","ids","ValidationError","MaplibreValidationError","MapboxValidationError","includes","validateMisplacedPaintProperties","paintProperties","validateMisplacedLayoutProperties","layoutProperties","validateLayer","l","Infinity","_lint","_interopRequireDefault","__esModule"],"version":3,"file":"main.js.map"}