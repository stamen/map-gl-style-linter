{"mappings":";;;;AEEA,EAKG,AALH;;;;;CAKG,AALH,EAKG,CACH,KAAK,CAAC,oCAAc,IAAG,IAAI,GAAI,CAAC;IAC9B,GAAG,CAAC,WAAW,GAAG,aAAM,CAAC,IAAI,EAC1B,GAAG,EAAC,SAAS,GAAI,MAAM,CAAC,IAAI,CAAC,aAAM,CAAC,SAAS;MAC7C,IAAI,CAAC,CAAC;IACT,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW;AACvC,CAAC;AAED,KAAK,CAAC,qCAAe,GAAG,oCAAc,CAAC,CAAO;AAC9C,KAAK,CAAC,sCAAgB,GAAG,oCAAc,CAAC,CAAQ;AAEhD,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,CACH,KAAK,CAAC,iDAA2B,IAAI,KAAK,EAAE,GAAG,EAAE,IAAI,GAAK,CAAC;IACzD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EACrB,MAAM,EAAC,GAAG,GAAI,GAAG,CAAC,QAAQ,CAAC,GAAG;MAC9B,GAAG,EAAC,GAAG,GAAI,GAAG,CAAC,sBAAe,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,CAAC,wCAAwC,EAAE,IAAI;;AACxI,CAAC;AAED,KAAK,CAAC,sDAAgC,IAAG,KAAK,GAAI,CAAC;IACjD,MAAM,CAAC,iDAA2B,CAAC,KAAK,EAAE,qCAAe,EAAE,CAAO;AACpE,CAAC;AAED,KAAK,CAAC,uDAAiC,IAAG,KAAK,GAAI,CAAC;IAClD,MAAM,CAAC,iDAA2B,CAAC,KAAK,EAAE,sCAAgB,EAAE,CAAQ;AACtE,CAAC;AAEM,KAAK,CAAC,yCAAa,IAAG,KAAK,GAAI,CAAC;IACrC,MAAM,CAAC,CAAC;WACH,uDAAiC,CAAC,KAAK;WACvC,sDAAgC,CAAC,KAAK;IAC3C,CAAC;AACH,CAAC;AAEM,KAAK,CAAC,yCAAc,IAAG,KAAK,GAAI,CAAC;IACtC,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IAC5B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,yCAAa,EAAE,IAAI,CAAC,QAAQ;AACtD,CAAC;;;ID/CD,wCAKE,IALc,KAAK,GAAK,CAAC;IACzB,MAAM,CAAC,CAAC;WACH,eAAQ,CAAC,KAAK;WACd,yCAAc,CAAC,KAAK;IACzB,CAAC;AACH,CAAC","sources":["stamen/mapbox-gl-style-linter/src/index.js","stamen/mapbox-gl-style-linter/src/lib/lint.js","stamen/mapbox-gl-style-linter/src/lib/lint-layer.js"],"sourcesContent":["import lint from \"./lib/lint\";\n\nexport { lint };\n","import { validate } from '@mapbox/mapbox-gl-style-spec';\nimport { validateLayers } from './lint-layer.js';\n\nexport default (style) => {\n  return [\n    ...validate(style),\n    ...validateLayers(style),\n  ];\n};\n","import { latest, ValidationError } from '@mapbox/mapbox-gl-style-spec';\n\n/**\n * getPropertyIds\n * Get property ids for either `paint` or `layout` properties\n * @param {string} type - `paint` or `layout`\n * @returns {string[]} - property ids for the given type\n */\nconst getPropertyIds = type => {\n  let propertyIds = latest[type]\n    .map(layerType => Object.keys(latest[layerType]))\n    .flat(1);\n  return Array.from(new Set(propertyIds));\n};\n\nconst paintProperties = getPropertyIds('paint');\nconst layoutProperties = getPropertyIds('layout');\n\n/**\n * validateMisplacedProperties\n * Find property ids at the top level of a layer that should not be there\n * @param {Object} layer - a layer object from a style\n * @param {string[]} ids - property ids to look for\n * @param {string} type - `paint` or `layout`\n * @returns {ValidationError[]} - an error for each id found, if any\n */\nconst validateMisplacedProperties = (layer, ids, type) => {\n  return Object.keys(layer)\n    .filter(key => ids.includes(key))\n    .map(key => new ValidationError(key, layer[key], `layer '${layer.id}' contains '${key}' at the top level, but it should be in ${type}`));\n}\n\nconst validateMisplacedPaintProperties = layer => {\n  return validateMisplacedProperties(layer, paintProperties, 'paint');\n};\n\nconst validateMisplacedLayoutProperties = layer => {\n  return validateMisplacedProperties(layer, layoutProperties, 'layout');\n};\n\nexport const validateLayer = layer => {\n  return [\n    ...validateMisplacedLayoutProperties(layer),\n    ...validateMisplacedPaintProperties(layer),\n  ];\n};\n\nexport const validateLayers = style => {\n  if (!style.layers) return [];\n  return style.layers.map(validateLayer).flat(Infinity);\n};\n"],"names":[],"version":3,"file":"module.js.map"}