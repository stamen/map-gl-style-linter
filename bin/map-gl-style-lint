#!/usr/bin/env node

const fs = require('fs');
const jsonlint = require('@mapbox/jsonlint-lines-primitives');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const { lint } = require('../dist/main');

const argv = yargs(hideBin(process.argv))
  .usage('Usage: $0')
  .option('renderer', {
    alias: 'renderer',
    describe: 'Renderer to use',
    choices: ['maplibre-gl', 'mapbox-gl']
  })
  .example(
    `$0
\t--renderer=maplibre-gl`
  )
  .parse();

const parseArguments = argv => {
  const { _: args, renderer = 'mapbox-gl' } = argv;

  const filepaths = [];

  args.forEach(v => {
    filepaths.push(v);
  });

  if (!filepaths.length) {
    console.error(`Could not find filepaths. Exiting.

Usage: ${process.argv[1]} files...`);
    process.exit(1);
  }

  return { filepaths, renderer };
};

const getErrorOutput = (file, error) => {
  return `${file}:${error.line}: ${error.message}`;
};

const { filepaths, renderer } = parseArguments(argv);

let errors = [];

filepaths.map(file => {
  let style;
  try {
    style = fs.readFileSync(file, 'utf8');
  } catch (err) {
    console.error(err);
    process.exit(1);
  }

  // Use jsonlint to get line numbers
  style = jsonlint.parse(style);

  let styleErrors = lint(style, { renderer });

  if (styleErrors) {
    styleErrors = styleErrors.map(e => getErrorOutput(file, e));
    errors = errors.concat(styleErrors);
  }
});

if (errors.length) {
  errors.forEach(e => console.log(e));
  process.exit(1);
}
